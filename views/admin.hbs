{{> includes base="../" }}
<style>
    div.show {
        display:block;
    }
    .unauthenticated, .admin-panel, .only-started-quiz, .only-concluded-quiz, .only-no-quiz {
        display:none;
    }
    .timeout-display, .quiz-code-display {
        font-size:38px;
        font-weight:bold;
    }
    .players-display {
        font-size:24px;
        color:#555;
    }
    .winner-display {
        display:block;
        font-size:24px;
        font-weight:bold;
        margin-bottom:16px;
    }
    tr.template {
        display:none;
    }
    svg .response-path {
        fill:none;
        stroke:#333;
        stroke-width:4px;
        stroke-linecap:round;
        stroke-linejoin:round;
    }
</style>
<script>
    var wm, ws, question_id, contestants = {}, gracefulClose = false;

    function startQuiz() {
        ws.send("start", {});
    }

    function endQuiz() {
        ws.send("conclusion", {});
    }

    function markResponse(response_id, is_correct) {
        ws.send("evaluate", {
            "response_id": response_id,
            "correct": is_correct
        });
    }

    function showAnswer() {
        ws.send("answer", {});
    }

    function nextQuestion() {
        ws.send("question", {});
    }

    function updatePlayers() {
        var names = [];
        for (var prop in contestants) if (contestants.hasOwnProperty(prop)) {
            names.push(contestants[prop].contestant_name);
        }

        $(".players-display").text(names.join(", "));
    }

    function zeroPrefix(s, n, c) {
        s = s.toString();
        c = c || '0';
        return (new Array(n - s.length + 1)).join(c) + s;
    }

    $(function () {
    Require(["assets/js/tblib/loader.js",
             "assets/js/tblib/ui.js",
             "assets/js/jswm2.js"], function () {

        ws = new WSManager("webdrawquiz.host_sid");
        ws.open("../api/v1/ws/host");
        ws.on('close', function () {
            if (!gracefulClose)
                reportError("The connection has been closed prematurely.");
        });

        $(window).on("beforeunload", function () {
            gracefulClose = true;
            ws.close();
        });

        loader.addTask(function (resolve) {
            if (ws.authenticated) resolve();
            else ws.on("authenticated", function () { resolve(); });
        }, 2000, "websocket");

        ws.on("message-type.start", function (e, msg) {
            if (!msg.title) {
                return reportError("Got unexpected response from server (type='start')");
            }
            $(".quiz-title").text(msg.title);
            $(".only-no-quiz").removeClass("show");
            $(".only-started-quiz").addClass("show");
        });
        ws.on("message-type.close", function (e, msg) {
            gracefulClose = true;
        });

        ws.on("message-type.question", function (e, msg) {
            if (!msg.question || !msg.question_id || !msg.answer) {
                return reportError("Got unexpected response from server (type='question')");
            }
            question_id = msg.question_id;
            $(".quiz-question-display").text(msg.question);
            $(".quiz-answer-display").text(msg.answer);
            $(".quiz-responses tbody tr:not(.template)").remove();

            var expiry = new Date(msg.timeout).getTime();
            var interval = setInterval(function () {
                var timeRemaining = Math.max(expiry - new Date().getTime(), 0);
                var minutes = Math.floor(timeRemaining / (1000 * 60));
                var seconds = (timeRemaining / 1000) % 60;
                $(".timeout-display").text(
                        zeroPrefix(minutes, 2) +
                        ":" +
                        zeroPrefix(seconds.toFixed(2), 5));

                if (timeRemaining === 0) {
                    clearInterval(interval);
                } else if (question_id !== msg.question_id) {
                    clearInterval(interval);
                }
            }, 1);
        });

        ws.on("message-type.contestant", function (e, msg) {
            if (msg.status == "connected") {
                contestants[msg.contestant_id] = msg;
            } else if (msg.status == "disconnected") {
                if (contestants[msg.contestant_id] !== undefined)
                    delete contestants[msg.contestant_id];
            } else {
                reportError("Got unexpected response from server (type='contestant').");
            }

            updatePlayers();
        });

        ws.on("message-type.response", function (e, msg) {
            if (!msg.response_id || !msg.response_type || !msg.response_data || !msg.contestant_id)
                return reportError("Got unexpected response from server (type='response')");

            var row = $(".quiz-responses tbody tr.template")[0].cloneNode(true);
            $(row).removeClass("template");
            $(".quiz-responses tbody").append(row);

            var contestant = contestants[msg.contestant_id];
            if (contestant === undefined)
                return reportError("Contestant ID is invalid (type='response')");

            $(".quiz-responses tbody .contestant-name").filter(function (i, e) {
                return $(e).text() === contestant.contestant_name;
            }).parents("tr").remove();

            $(row).find(".contestant-name").text(contestant.contestant_name);
            $(row).find(".contestant-correct").on('change', function () {
                markResponse(msg.response_id, this.checked);
            });
            switch (msg.response_type) {
                case "text":
                    var span = document.createElement("span");
                    span.className = "response-text-display";
                    span.innerText = msg.response_data;
                    $(row).find(".contestant-response-container").append(span);
                    break;

                case "paths":
                    var data;
                    try {
                        data = JSON.parse(msg.response_data);
                    } catch (e) {
                        reportError("Contestant response failed to parse.", e);
                    }

                    if (!data.width || !data.height || !data.plots)
                        reportError("Got unexpected response (id='"
                                + msg.response_id
                                + "') from contestant (name='"
                                + contestant.name
                                + "')");

                    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                    svg.setAttribute("viewBox", [0, 0, data.width, data.height].join(" "));
                    svg.setAttribute("class", "response-paths-display");
                    $(row).find(".contestant-response-container").append(svg);

                    var helper = new SVGHelper(svg);
                    data.plots.forEach(function (plot) {
                        helper.linePlot(plot, "response-path");
                    });
                    break;

                default:
                    reportError("Got unexpected response type (type='"
                            + msg.response_type
                            + "')");
            }

        });

        ws.on("message-type.conclusion", function (e, msg) {
            if (!msg.winner_id)
                return reportError("Got unexpected response from server (type='conclusion')");

            $(".only-started-quiz").removeClass("show");
            $(".only-concluded-quiz").addClass("show");
            var contestant = contestants[msg.winner_id];
            if (contestant === undefined)
                return reportError("Winning contestant is invalid or offline.");

            $(".winner-display").text(contestant.contestant_name);
        });

        loader.start();
        $(".overlay-container").addClass("hide-error");

        $(document).on("pageload", function () {
            $(".overlay-container").removeClass("hide-error");

            $(".only-no-quiz").addClass("show");

            if (ws.authenticated) {
                $(".admin-panel").addClass("show");
                $(".quiz-code-display").text(
                        readCookie("webdrawquiz.quiz_code")
                );
            } else {
                hideOverlay();
                $(".unauthenticated").addClass("show");
            }


            $(".start-quiz").click(function () { startQuiz(); });
            $(".end-quiz").click(function () { endQuiz(); });
            $(".show-answer").click(function () { showAnswer(); });
            $(".next-question").click(function () { nextQuestion(); });

        });
    });
    });
</script>
{{> header }}
<main>
    <div class="hero-container">
        <h2>Administrate Quiz</h2>
        <h3 class="quiz-title"></h3>
    </div>
    <div class="unauthenticated">
        <p>
            Create a quiz here:
        </p>
        <div class="control-row">
            <a href="create"><button class="major">Create Quiz</button></a>
        </div>
    </div>
    <div class="admin-panel">
        <div class="only-no-quiz">
            <div class="control-row">
                <button class="major start-quiz">Start Quiz</button>
            </div>
        </div>
        <div class="control-row">
            <h3>Quiz code:</h3>
            <span class="quiz-code-display"></span>
        </div>
        <div class="control-row">
            <h3>Players:</h3>
            <span class="players-display"></span>
        </div>
        <div class="only-started-quiz">
            <div class="control-row">
                <button class="show-answer">Show Answer</button>
                <button class="major next-question">Next Question</button>
                <button class="end-quiz">End Quiz</button>
            </div>
            <div class="control-row">
                <h3><q class="quiz-question-display"></q></h3>
                <h3 class="quiz-answer-display"></h3>
            </div>
            <div class="control-row">
                <div>
                    Time remaining:
                </div>
                <span class="timeout-display"></span>
            </div>
            <table class="main quiz-responses">
                <thead>
                    <tr>
                        <th>Contestant</th>
                        <th>Response</th>
                        <th><i class="material-icons">check</i></th>
                    </tr>
                </thead>
                <tbody>
                    <tr class="template">
                        <td class="contestant-name"></td>
                        <td class="contestant-response-container"></td>
                        <td><input type="checkbox" class="contestant-correct" /></td>
                    </tr>
                </tbody>
            </table>
        </div>
        <div class="only-concluded-quiz">
            <p>
                The quiz is over. The winner is:
            </p>
            <span class="winner-display"></span>
        </div>
    </div>
</main>
<div class="overlay-container">
    <div class="error">

    </div>
</div>
