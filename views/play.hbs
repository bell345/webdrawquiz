{{> includes base="../" }}
<style>
    .drawing-container {
        position:fixed;
        top:0;
        left:0;
        right:0;
        bottom:72px;
        background:white;
    }
    svg .path {
        fill:none;
        stroke:#333;
        stroke-width:4px;
        stroke-linecap:round;
        stroke-linejoin:round;
    }
    .toolbox-container {
        position:fixed;
        left:0;
        right:0;
        bottom:0;
        height:72px;
        background:#eee;
    }
    .toolbox {
        display:flex;
        height:100%;
        width:100%;
        text-align:center;
        flex-flow:row nowrap;
        justify-content:space-around;
        align-items:center;
        vertical-align:middle;
        font-size:36px;
    }
    .toolbox li {
        display:inline-block;
        flex-grow:1;
        height:100%;
        line-height:72px;
        transition:all 0s, border-bottom 0.2s, background 0.2s;
        border-bottom:6px solid transparent;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }
    .toolbox li:not(.text-item) {
        cursor:pointer;
    }
    .toolbox li:not(.text-item):hover {
        background:rgba(0,0,0,0.1);
    }
    .toolbox i.material-icons {
        line-height:inherit;
        font-size:36px;
    }
    .toolbox-submit {
        background:#08d;
        color:#eee;
    }
    .toolbox li.toolbox-submit:hover {
        background:#07c;
    }
    .toolbox li.active {
        border-bottom-color:#08d;
    }

    .question-popup {
        position:fixed;
        bottom:72px;
        left:0;
        right:0;
        text-align:center;
        padding:8px 12px;
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
    }


</style>
<script>
    var ws, canvas,
        myId = null,
        question_id = null,
        gracefulClose = false,
        timeoutInterval = null,
        held = false,
        score = 0;

    LEGAL_STATE_TRANSITIONS = {
        "default": ["unauthenticated", "pre-game"],
        "unauthenticated": [],
        "pre-game": ["pre-game", "question", "error", "default"],
        "question": ["question", "answer", "timeout", "conclusion", "error", "default"],
        "timeout": ["question", "answer", "error", "default"],
        "answer": ["question", "conclusion", "error", "default"],
        "conclusion": [],
        "error": []
    };

    function resetTimeout() {
        clearInterval(timeoutInterval);
        $(".timeout-display").text("00:00.00");
    }

    function submitPaths(paths) {
        var arr = [];
        for (var id in paths) if (paths.hasOwnProperty(id)) {
            arr.push(paths[id].abs_plot);
        }

        var data = {
            "width": $(window).width(),
            "height": $(window).height(),
            "plots": arr
        };
        data = JSON.stringify(data);

        if (question_id !== null) {
            ws.send("response", {
                "question_id": question_id,
                "response_type": "paths",
                "response_data": data
            });
        }
    }

    function Path(abs_plot) {
        this.abs_plot = abs_plot;
        this.rel_plot = abs_plot.map(function (point) {
            return [point[0] / $(window).width(),
                    point[1] / $(window).height()];
        });

        this.id = generateUUID();
        this.draw = function (canvas) {
            canvas.helper.linePlot(this.abs_plot,
                    [this.id, 'path'].join(" "),
                    "paths"
            );
            canvas.helper.appendGroup("paths");
        };
    }

    function DrawingCanvas(svg, parent) {
        if (isNull(parent)) parent = $(svg).parent()[0];
        WideSVG.call(this, svg, parent);

        this.paths = {};
        this.currentPath = [];

        this.commitPath = function () {
            if (this.currentPath === null || this.currentPath.length <= 0)
                return;

            var path = new Path(this.currentPath);
            this.paths[path.id] = path;
            this.currentPath = [];
        };

        this.loop = function (delta) {
            this.helper.clear();

            var self = this;
            for (var id in self.paths) if (self.paths.hasOwnProperty(id)) {
                self.paths[id].draw(self);
            }

            if (this.currentPath !== null) {
                this.helper.linePlot(this.currentPath,
                        "current-path path",
                        "paths"
                );
                this.helper.appendGroup("paths");
            }

            this.triggerEvent("draw");
        };
    }
    DrawingCanvas.prototype = Object.create(WideSVG.prototype);
    DrawingCanvas.prototype.constructor = DrawingCanvas;

    $(function () {
    Require(["assets/js/tblib/loader.js",
             "assets/js/tblib/ui.js",
             "assets/js/jswm2.js"], function () {

        displayOverlay("disconnected");
        ws = new WSManager("webdrawquiz.contestant_sid");
        ws.on('close', function () {
            if (!gracefulClose) {
                if (!changeState("default")) return;
                displayOverlay("disconnected");
                ws.reopen(null, function () {
                    reportError("The connection has been closed prematurely.");
                });
            }
        });

        loader.addTask(function (resolve, reject) {
            if (ws.authenticated === true) { resolve(); }
            else if (ws.authenticated === false) { reject("unauthenticated"); }
            else {
                ws.on("authenticated", function () { resolve(); });
                ws.on("unauthenticated", function () { reject("unauthenticated"); });
            }
        }, 10000, "websocket");

        ws.on("authenticated", function () {
            if (!changeState("pre-game")) return;
            displayOverlay("not-started");
        });

        ws.on("unauthenticated", function () {
            if (!changeState("unauthenticated")) return;
            displayOverlay("unauthenticated");
        });

        $(window).on("beforeunload", function () {
            gracefulClose = true;
            ws.close();
        });

        ws.on("message-type.start", function (e, msg) {
            if (!msg.title || !msg.contestant_id) {
                return reportError("Got unexpected response from server (type='start')");
            }
            if (!changeState("pre-game")) return;

            myId = msg.contestant_id;
            hideOverlay();
        });
        ws.on("message-type.contestant", function (e, msg) {
            if (!msg.contestant_id || !msg.status)
                return reportError("Got unexpected response from server (type='contestant')");

            if (msg.status === "connected" && msg.contestant_id === myId) {
                score = parseFloat(msg.score);
                $(".score-display").text(score.toString() + " point" + (score == 1 ? "" : "s"));
            }
        });
        ws.on("message-type.question", function (e, msg) {
            if (!msg.question_id || !msg.question || msg.timeout === undefined)
                return reportError("Got unexpected response from server (type='question')");

            if (!changeState("question")) return;

            hideOverlay();
            if (canvas)
                canvas.paths = {};

            question_id = msg.question_id;
            $(".question-display").text(msg.question);
            var expiry = new Date(msg.timeout).getTime();

            var interval = setInterval(function () {
                var timeRemaining = Math.max(expiry - new Date().getTime(), 0);
                var minutes = Math.floor(timeRemaining / (1000 * 60));
                var seconds = (timeRemaining / 1000) % 60;
                $(".timeout-display").text(
                        zeroPrefix(minutes, 2)
                        + ":"
                        + zeroPrefix(seconds.toFixed(2), 5));

                if (timeRemaining === 0) {
                    clearInterval(interval);

                    if (!changeState("timeout")) return;
                    displayOverlay("question-timeout");
                } else if (question_id !== msg.question_id) {
                    clearInterval(interval);
                }
            }, 1);
            clearInterval(timeoutInterval);
            timeoutInterval = interval;
        });
        ws.on("message-type.answer", function (e, msg) {
            if (!msg.question_id || !msg.answer || msg.correct === undefined)
                return reportError("Got unexpected response from server (type='answer')");

            if (!changeState("answer")) return;

            $(".answer-display").text(msg.answer);
            $(".score-display").text(msg.score.toString() + " point" + (msg.score == 1 ? "" : "s"));
            resetTimeout();

            if (msg.correct) {
                displayOverlay("answer-correct");
            } else {
                displayOverlay("answer-incorrect");
            }
        });
        ws.on("message-type.conclusion", function (e, msg) {
            if (!msg.winner_id)
                return reportError("Got unexpected response from server (type='conclusion')");

            if (!changeState("conclusion")) return;
            resetTimeout();

            if (msg.winner_id == myId) {
                displayOverlay("end-game-win");
            } else {
                displayOverlay("end-game-lose");
            }
        });
        ws.on("message-type.close", function (e, msg) {
            gracefulClose = true;
        });

        ws.open("../api/v1/ws/contestant");
        loader.start();

        $(document).on("pageload", function () {
            canvas = new DrawingCanvas($(".drawing-plane")[0]);

            function bindToPlane(query, evt, planeEvt) {
                if (isNull(planeEvt)) planeEvt = evt;
                $(query).on(evt, function (event) {
                    canvas.triggerEvent(planeEvt, event);
                });
            }

            bindToPlane(".drawing-plane", "mousedown", "input_start");
            bindToPlane(".drawing-plane", "mousemove", "input_move");
            bindToPlane(".drawing-plane", "mouseup", "input_end");
            bindToPlane(".drawing-plane", "mouseleave", "input_end");
            bindToPlane(".drawing-plane", "touchstart", "input_start");
            bindToPlane(".drawing-plane", "touchmove", "input_move");
            bindToPlane(".drawing-plane", "touchend", "input_end");
            bindToPlane(".drawing-plane", "touchcancel", "input_end");

            function getXY(e) {
                var x, y;
                if (e.changedTouches && e.changedTouches.length > 0) {
                    x = e.changedTouches[0].clientX;
                    y = e.changedTouches[0].clientY;
                } else if (e.clientX && e.clientY) {
                    x = e.clientX;
                    y = e.clientY;
                }

                if (x === undefined || y === undefined)
                    return null;
                else return [x, y];
            }

            function erasePath(target) {
                var uuidRe = /([0-9A-Fa-f]{8}-([0-9A-Fa-f]{4}-){3}[0-9A-Fa-f]{12})/;

                if (!isNull(target) &&
                        target.getAttribute("class").search("path") !== -1)
                {
                    var id = target.getAttribute("class").match(uuidRe)[1];
                    if (canvas.paths[id] !== undefined)
                        delete canvas.paths[id];
                }
            }

            canvas.addEventHandler("input_start", function (plane, e) {
                held = true;
                e.preventDefault();

                if (plane.currentPath === null) return;

                var xy = getXY(e.originalEvent);
                if (!xy) return;
                plane.currentPath.push(xy);
                plane.currentPath.push(xy); // to allow for dots
            });
            canvas.addEventHandler("input_end", function (plane, e) {
                held = false;
                e.preventDefault();
                plane.commitPath();
            });
            canvas.addEventHandler("input_move", function (plane, e) {
                if (!held) return;
                e.preventDefault();

                if (plane.currentPath === null) return;

                var xy = getXY(e.originalEvent);
                if (!xy) return;
                plane.currentPath.push(xy);
            });

            $(".toolbox-eraser").click(function () {
                canvas.paths = {};
            });
            $(".toolbox-submit").click(function () {
                submitPaths(canvas.paths);
            });
        });
    });
    });
</script>
</head>
<body>
<div class="drawing-container">
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" class="drawing-plane"></svg>
</div>
<div class="question-popup">
    <q class="question-display"></q>
</div>
<div class="toolbox-container">
    <ul class="toolbox">
        <li class="toolbox-eraser">
            <i class="material-icons">delete</i>
        </li>
        <li class="toolbox-submit">
            <i class="material-icons">send</i>
        </li>
        <li class="toolbox-time-remaining text-item">
            <span class="timeout-display">00:00.00</span>
        </li>
    </ul>
</div>
<div class="overlay-container">

    <div class="unauthenticated">
        <p>
            Join a quiz:
        </p>
        <a href="join/"><button class="major">Join Quiz</button></a>
    </div>
    <div class="disconnected">
        <p>
            Connecting...
        </p>
    </div>
    <div class="not-started">
        <p>
            Waiting for host to begin game...
        </p>
    </div>
    <div class="question-timeout">
        <p>
            Time's up. Waiting for the host to reveal the answer...
        </p>
    </div>
    <div class="answer-correct">
        <div class="control-row">
            <p>
                You were correct! The answer was:
            </p>
            <h4 class="answer-display"></h4>
        </div>
        <p>
            You now have:
        </p>
        <h4 class="score-display"></h4>
    </div>
    <div class="answer-incorrect">
        <div class="control-row">
            <p>
                You were incorrect. The correct answer was:
            </p>
            <h4 class="answer-display"></h4>
        </div>
        <p>
            You now have:
        </p>
        <h4 class="score-display"></h4>
    </div>
    <div class="end-game-win">
        <p>
            You won the game! Your score is:
        </p>
        <h3 class="score-display"></h3>
    </div>
    <div class="end-game-lose">
        <p>
            The game is complete. Your score is:
        </p>
        <h3 class="score-display"></h3>
    </div>
    <div class="error only state-error">

    </div>
</div>
